% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cor_matrix.R
\name{cor_mat}
\alias{cor_mat}
\alias{reorder_cor_mat}
\alias{replace_cor_by_symbols}
\alias{subset_cor_mat}
\alias{pull_variables}
\title{Correlation Matrix with P-values}
\usage{
cor_mat(data, vars = NULL, ...)

reorder_cor_mat(x)

replace_cor_by_symbols(x, cutpoints = c(0, 0.25, 0.5, 0.75, 1),
  symbols = c(" ", ".", "+", "*"))

subset_cor_mat(x, vars)

pull_variables(x, vars)
}
\arguments{
\item{data}{a data.frame containing the variables.}

\item{vars}{a character vector containing at least two variable names.}

\item{...}{Other arguments passed to the function \code{\link{cor_test}()}}

\item{x}{a correlation matrix}

\item{cutpoints}{numeric vector used for intervals. Default values are \code{c(0, 0.25, 0.5, 0.75, 1)}.}

\item{symbols}{character vector, one shorter than cutpoints, used as
correlation coefficient symbols. Default values are \code{c(" ", ".",  "+", "*")}.}
}
\value{
a data frame
}
\description{
Compute correlation matrix with p-values. Numeric columns in the
  data are detected and automatically selected.
}
\section{Functions}{
\itemize{
\item \code{cor_mat}: compute correlation matrix with p-values.

\item \code{reorder_cor_mat}: reorder correlation matrix, according the
coefficients, using the hierarchical clustering method.

\item \code{replace_cor_by_symbols}: Replace correlation coefficients by symbols

\item \code{subset_cor_mat}: Subset of a correlation matrix

\item \code{pull_variables}: alias of subset_cor_mat()
}}

\examples{
# Compute correlation matrix
#::::::::::::::::::::::::::::::::::::::::::
df <- mtcars[, c(1,3,4,5,6,7)]
cor.mat <- cor_mat(df)
cor.mat

# Pull lower/upper triangle parts
#::::::::::::::::::::::::::::::::::::::::::

# Pull lower triangular part
cor.mat \%>\% pull_lower_triangle()

# Pull upper triangular part
cor.mat \%>\% pull_upper_triangle()


# Replace correlation coefficient by symbols
#::::::::::::::::::::::::::::::::::::::::::
cor.mat \%>\%
 replace_cor_by_symbols(
   cutpoints = c(0, 0.25, 0.5, 0.75, 1),
   symbols = c(" ", ".",  "+", "*")
 ) \%>\%
 pull_lower_triangle()

}
